// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole @default(USER)
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts      Account[]
  sessions      Session[]
  travels       Travel[]
  preferences   Preference[]
  itineraries   Itinerary[]
  feedbacks     Feedback[]

  @@map("users")
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])

  @@map("verification_tokens")
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])

  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])

  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])

  @@map("two_factor_confirmations")
}

model Travel {
  id        String   @id @default(cuid())
  userId    String
  city      String
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activities Activity[]
  itinerary Itinerary?
  feedbacks Feedback[]

  @@map("travels")
}

model Activity {
  id        String   @id @default(cuid())
  travelId  String
  name      String
  category  String
  location  String
  duration  Int // duration in minutes
  travel    Travel @relation(fields: [travelId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Preference {
  id        String   @id @default(cuid())
  userId    String
  type      String
  value     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("preferences")
}

model Itinerary {
  id        String   @id @default(cuid())
  userId    String
  travelId  String   @unique
  dayPlans  Json // Store daily plans in JSON format
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  travel    Travel   @relation(fields: [travelId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}

model Feedback {
  id        String   @id @default(cuid())
  userId    String
  travelId  String
  rating    Int      // rating out of 5
  comment   String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  travel    Travel   @relation(fields: [travelId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}
